
import express from 'express';
import Book from '../models/book.js';
import BookRepository from '../repositories/bookRepository.js';

const bookRepo = new BookRepository();

class BookController {
    constructor() {
        this.router = express.Router();
        this.router.get('/', (request, response) => this.getAllBooks(request, response));
        this.router.get('/:id', (request, response) => this.getBook(request, response));
        this.router.post('/', (request, response) => this.addBook(request, response));
    }

    async getAllBooks(request, response) {
        console.log("request for all books" + request.url);

        try {
            let books = await bookRepo.getAllBooks();
            response.status(200).send(JSON.stringify(books));
        } catch (e) {
            BookController.sendErrorResponse(e, response);
        }

    }

    async getBook(request, response) {
        const idStr = request.params.id;
        const id = parseInt(idStr)
        if ( isNaN(id) || ( (id + "") !== idStr) ){
            response.status(400).send(JSON.stringify({"id": idStr, "message" : "id must be integer"}));
            return;
        }


        console.log("request for book " + id);

        try {
            let book = await bookRepo.getBook(id);
            if (book) {
                response.status(200).send(JSON.stringify(book));
            } else {
                response.status(404).send(JSON.stringify({"id": id}));
            }
        } catch (e) {
            BookController.sendErrorResponse(e, response);
        }
    }

  

    async addBook(request, response) {
        const book = BookController.getBookFromRequest(request);
        if (!book) {
            response.status(400).send({ errors: ['Invalid book'] });
        } else {
            let insertedId = await bookRepo.addBook(book);

            console.log("added record with id: ", insertedId);
            const reference = request.protocol + '://' + request.get('host') + request.originalUrl + "/" + insertedId;
            const responseBody = {
                "message": "Added book",
                "id": insertedId,
                "reference": reference
            };

            response.status(201)
                .set('Location', reference)
                .send(JSON.stringify(responseBody));

        }
    }

    static getBookFromRequest(request) {

        if (request.body &&
            'title' in request.body &&
            'author' in request.body
        ) {
            const title = request.body.title;
            const author = request.body.author;
            const isbn = ('isbn' in request.body) ? request.body.isbn : null;

            // id is generated by db, so currently unknown
            const book = new Book(null, title, author, isbn);
            console.log("book to add " + JSON.stringify(book));
            return book;
        } else {
            return null;
        }
    }

    static sendErrorResponse(err, response, status = 500) {
        console.log("query failed ", err);
        response.status(status).send(
            JSON.stringify(
                {
                    "message": "System unavailable, please try later",
                    "error": err
                }
            )
        );
        return;
    }

}

export default new BookController().router;

